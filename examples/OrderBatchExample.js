import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import SunFrogAPI from '../src/SunFrogAPI';
import OrderItem from '../src/OrderItem'; 

export default CreateBatchExample App extends React.Component {

  render() {  
    // set up our API object and auth details
    var sfapi = new SunFrogAPI('CC9418BF-0A6E-4C02-B','029EEDE6-A7ED-4587-8');
    sfapi.setUserProfile('3FZXSDFZ8G', 'gvbrown@gmail.com', 'mrbrown');

    /* **** Create Order Items **** 
    For simplicity, we create an array of orderItem objects. 
    In a real world scneario, this could be an array generated by 
    a record set, JSON or other structured format, which is applied to 
    our order items array.  In our example, we have a single order 
    with two order items. */ 

    orderItems = [];

    // create one order item and add to the array 
    var orderItem = new OrderItem(1362037609,1,'L');
    arrayLen = orderItems.push(orderItem); 

    // create another orderitem and add to the array 
    orderItem = new OrderItem(1362037609,1,'XL');
    arrayLen = orderItems.push(orderItem);


    // call startBatch to create a new batch
    sfapi.startBatch(). 
      then((response) => { 
        // obtain a new or current batchid (start batch will return both)  
        currentBatch = response[0].BatchID; 

          sfapi.addOrder(
            batchid = currentBatch, 
            email = 'geoff@sunfrog.com', 
            name = 'SunFrog Shirts', 
            address1 = '1782 ORourke Blvd', 
            address2 = '', 
            city = 'Gaylord', 
            state = 'MI', 
            shippingZipCode='49735', 
            country = 'United States', 
            memo='', 
            orderItems = orderItems
          )
          .then((response) => {
              // get the response from add order
              console.log(response); 
              sfapi.finalizeBatch(currentBatch)
                .then((response) => {
                  // get the response from finalize
                  console.log(response); 
                  sfapi.endBatch(currentBatch)
                    .then((response) => {
                      // get the response from end batch.
                      console.log(response); 
                    })
                })
            })
      });

    return (
      <View style={styles.container}>
        <Text>Nothing to see here!</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
